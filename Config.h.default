/************************************************************************************/
/************************************************************************************/
/* Settings -   BEGIN                                                               */
/************************************************************************************/
/************************************************************************************/
/*
   if defined the URL has to contain the defined passkey as first element
   e.g.
   http://192.168.1.50/1234/     - to view the help
   http://192.168.1.50/1234/K    - to list all categories
*/

#define PASSKEY  "1234"

/*
    Enter a MAC address and IP address for your controller below.
    The IP address will be dependent on your local network:
*/
byte mac[] = { 0x00, 0x6D, 0x4E, 0x4D, 0x64, 0xF0 };

/*
   Initialize the Ethernet server library
   with the IP address and port you want to use
   (port 80 is default for HTTP):
*/
IPAddress ip(192, 168, 178, 10);
EthernetServer server(80);

// If set to 1, all messages on the bus are printed to the PC
// hardware serial interface
byte verbose = 0;

// defines the number of retries for the query command
#define QUERY_RETRIES  3

// Protect these pins from accidental GPIO access
const byte excludeGpio[] = {18, 19, 20, 21, 50, 51, 52, 53};

// Parameters to be send via MQTT. The first byte shows the parameter to query from the ventilation. The other four bytes define which values received should be published via MQTT - '1' means publish, #0' means skip.
// The representation starts on the right side - e.g. B00000000, B00000000, B00000000, B00000011 means, that the first and second parameter will be published via MQTT. B00000000, B00000000, B00000000, B00000101 means the first and the third, etc.
byte MqttParameters[][5] = {
  {0x0D, B00000000, B00000000, B00000000, B00000011 },  // Klappenstatus abrufen
  {0xCD, B00000000, B00000000, B00000010, B00000001 },  // Ventilationsstufe abrufen
  {0x0F, B00000000, B00000000, B00000000, B00011111 },  // Temperaturstatus abrufen
  {0xDD, B00000000, B00000000, B00000001, B11101111 },  // Betriebsstunden abrufen
  {0xEF, B00000000, B00000000, B00000000, B00011111 }   // Sensorstatus pr√ºfen
};
unsigned long mqttInterval = 120;    // logging interval in seconds

// Activate sending log_parameters to MQTT broker every log_interval seconds
#define MQTTBrokerIP 192,168,178,11	// Please use commas instead of dots!!!
//#define MqttUsername "User" // Set username for Mqtt broker here or comment out if no username/password is used.
//#define MqttPassword "Pass" // Set password for Mqtt broker here or comment out if no password is used.
#define MqttTopicPrefix "Comfo-LAN" 	// Optional: Choose the "topic" for Mqtt messages here
//#define MqttJson 					// Optional: Use this if you want a json package of your logging information printed to the Mqtt topic
//#define MqttUnit           // Optional: Use this if you want a json package including units in the value
#define MqttDeviceID "ComfoD"	// Optional: Define a device name to use as header in json payload. If not defined, BSB-LAN will be used.
#define MqttSubscriptionPrefix "fhem" // Optional: Topic for listening
#define MqttSetLevelTopic "fhem/Comfo-LAN/Lueftung/Stufe"   // Optional: Topic for setting the level of the ventilation
// Payload will be of the structure: {"MqttDeviceID": {"status":{"log_param1":"value1","log_param2":"value2"}, ...}}

#define AirQualityCheck

#ifdef AirQualityCheck
unsigned int airQualityInterval = 60;  //s
int airQualityLoops = 12;
long airQualityLevelSlow = 20000;
long airQualityLevelStop = 40000;
#endif

/************************************************************************************/
/************************************************************************************/
/* Settings -   END                                                                 */
/************************************************************************************/
/************************************************************************************/
